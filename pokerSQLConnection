
<?php

session_start();


    include("connection.php");
    include("functions.php");
    // include('login.php');

    $user_data = checkLogin($con);//check if user is logged in
    $id =  $_SESSION['user_id'];

    if (!isset($_POST['storedBalance'])) {
        // echo 'No balance provided';

    }

    

    // Checking if form is submitted
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        if (!isset($_POST['storedBalance'])) {
            echo 'No balance provided';
        } else {
            $credits = $_POST['storedBalance']; // Grab the credits value
            
            // checking if the credits is a number
            if (!is_numeric($credits)) {
                echo 'Invalid credits value';
            } else {
                // Sql query
                $temp = "UPDATE users SET credits = $credits WHERE user_id = $id";
                // Do the query
                if (mysqli_query($con, $temp)) {
                    // echo 'Balance updated!';
                } else {
                    echo 'Error updating balance: ' . mysqli_error($con); 
                }
            }
        }
    }



    $query = "SELECT credits FROM users WHERE user_id = $id";
    $result = mysqli_query($con, $query); //grabbing user's credits
    
    $creditsText = mysqli_fetch_assoc($result); //fetching a thing makes an array. I named this variable wrong, it should be 'rows' because it is an array of rows
    // echo $creditsText['credits'];  //and here I am just getting 'credits' from the array of rows



    if ($result) {
        $user = mysqli_fetch_assoc($result);
        $balance = $user['credits'];
        // echo $balance;
    } else {
        // Handle the case where the query fails
        echo "Error fetching data: " . mysqli_error($con);
    }

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Texas Hold em!</title>
    <!--<link rel="stylesheet" href="styles.css">-->
    <style>
    
        @import url('https://fonts.googleapis.com/css2?family=Work+Sans:ital,wght@0,100..900;1,100..900&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Work+Sans:ital,wght@0,100..900;1, 100..900&display=swap');

        body{
            font-family: 'Poppins', sans-serif;
            height:100%;
            width:100%;
            overflow:hidden;
            background-color:rgb(20 20 20);

        }

        .page-container{
            position:absolute;
            height:100vh;
            width:100vw;
            /* display:flex;
            justify-content: center;
            align-items: center; */
        }

        .board-container{
            height:100%;
            width:100%;
            display:flex;
            justify-content: center;
            align-items: center;

            position:absolute;
        }
        .board{

            aspect-ratio: 3/2;
            height:900px;
             border: 5px solid rgb(22, 22, 22);
            margin:20px;
        /* 
            background-image:url("TableTexture.jpg"); */
            background-image: url("green_texture_4.avif");
            background-size: cover;
        }
        .board-content-container{
            /* border: 5px solid red; */
            margin:20px;
            padding:20px;
            aspect-ratio: 3/2;
            height:100px;
            position: absolute;
            top: 50%; right: 50%;
            transform: translate(50%,-50%);
            display:flex;
            align-items: center;
            flex-direction:column;
        }
        .community-cards{
            width:50px;
            height:50px;
            margin:10px;
            /* border: 3px solid red; */
        }
        .pot-container{
            aspect-ratio: 3/2;
            height:900px;
            display:flex;
            justify-content: center;
            /* border: 3px solid red; */
        }

        .button-container {
            position: absolute;
            bottom: 60px; /* Position buttons above the hand and results */
            left: 50%;
            transform: translateX(-50%);

            display:flex;
            align-items: center;
            justify-content: center;
            width:100%;
        }
        .hand-container {
            /* border: 5px solid red; */
            height: 50px;
            width: 300px; /* Adjust width as needed */
            text-align: right; /* Align text to the right */
            margin-left: auto; /* Push hand to the right */
        }
        .hotbar {
            /* border: 5px solid blue;  */
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            display: flex;

            flex-direction: row;
            /* align-items: center; Center items vertically */


            padding: 10px;
        }
        .results-container {
            position:absolute;
            /* border: 5px solid red; */
            aspect-ratio: 3/2;
            height: 100%;

            display: flex;
            justify-content: center;
        }
        .table {
            position: relative; 
            left: 50%;
            transform: translateX(-50%);
            /* border: 5px solid green; */
            aspect-ratio: 3/2;
            height: 950px;
            margin-bottom: 80px; /* Space for the hand and results */
            background-image: url("wood_texture_2.jpg");

        }
        .balance-container{
            position:absolute;
        }
        .card{

            box-shadow: 0 1px 10px rgba(0, 0, 0, 0.5);
            z-index:0;

            box-sizing: border-box;

            
            /* margin:5px; */
            /* border: 5px solid green; */
            width: 100px;  /* Adjust the width as needed */
            height: 140px; /* Adjust the height as needed */
            background-size: cover; /* Ensures the image covers the div */
        }

        .card-wrapper{
            margin: 5px;
        }
        .community-card-images{
            /* border: 5px solid green; */
            height:100px;
            width:500px;
            display:flex;
            flex-direction: row
        }

        .opponent-cards-container{
            position:relative;
            aspect-ratio: 3/2;
            height: 950px;
            /* border: 5px solid red; */
            display: flex;
            justify-content: center;
        }
        .opponent-1-images{
            position: absolute;
            bottom: 0;         
            left: 0;    
            padding: 10px;
        }
        .opponent-2-images{
            position: absolute;
            top: 0;         
            left: 0;    
            padding: 10px;
        }
        .opponent-3-images{
            position: absolute;
            top: 0;         
            right: 0;   
            padding: 10px;
        }
        .hand{
            display: flex;
            flex-direction: row
        }
        .hand-card-images{
            position: absolute;
            bottom: 0;         
            right: 0;  

             
            display:flex;
            flex-direction:row;
            justify-content: flex-end;
            padding: 10px;
            width:500px;
            /* border: 5px solid red; */
        }

        .result{
            order: -1; 
            position: relative;
            margin-right: 10px; 

        }

        #opp1ResultContainer{
            display: flex;
            /* justify-content: center; */
            flex-direction: column;
            align-items:center;

            /* border: 5px solid red; */
        }
        #opp2ResultContainer{
            display: flex;
            /* justify-content: center; */
            align-items:center;
            flex-direction: column;

            /* border: 5px solid red; */
        }
        #opp3ResultContainer{
            display: flex;
            /* justify-content: center; */
            align-items:center;
            flex-direction: column;
            /* border: 5px solid red; */
            
        }
        .card-hider{
            /* position:absolute; */
            width: 100px;
            height: 140px;
            margin: 5px;
            z-index:999;

        }
        .cardHider{
            width: 100px;
            height: 140px;
            box-sizing: border-box;
            display:block;
            z-index:999;
            /* border: 5px solid green; */

        }
        .hider-container{
            position:absolute;
            display:flex;
            flex-direction: row;
        }
        #opp1Result{
            bottom:0;
        }

        #hideContainer1{
            bottom: 0;         
            left: 0;    
            padding: 10px;
        }
        #hideContainer2{
            top: 0;         
            left: 0;    
            padding: 10px
        }
        #hideContainer3{
            top: 0;         
            right: 0;   
            padding: 10px;
        }



        .raise-container{
            display:none;
        }
        .play-button{
            visibility: visible;
        }
        .next-button{
            visibility: hidden;
        }
        .mainButtonsContainer{
            width:100%;
            display:flex;
            align-items: center;
            justify-content: center;
            visibility: hidden;
        }
        #balanceForm{
            display:none;
        }

        #playerResultContainer{
            /* border: 5px solid green; */
            display: flex;
            /* justify-content: center; */
            flex-direction: column;
        }
        #pokerImage{
            position:absolute;
            z-index:999;
        }
        #pokerImageContainer{
            display:flex;
            justify-content:center;
        }
        #pokingTimeContainer{position:absolute; width:100vw;}
        #pokingTime{ 
            position:relative;
            float:right;
        }


        #madeWithContainer{
            top:30%;
            position:absolute;
            width:500px;
            display:flex;
            flex-direction:column;
            justify-content:center;
            align-items:center;
        }
    

        #logoutContainer{
            position: absolute;
        }

        #playerResultContainer{
            display:flex;
            flex-direction:row;
            
        }
        #pot{
            font-size:40px;
            font-weight:bold;
            text-shadow: 3px 0 #000, -2px 0 #000, 0 3px #000, 0 -3px #000,
            2px 2px #000, -2px -2px #000, 2px -2px #000, -2px 2px #000;

            color:rgb(255 255 255);
        }
        #potContainer{
            margin:20px;
        }
        #innerPlayerResultContainer{
            /* border: 5px solid green; */
        }
        .balance{
   
        }
        .red-bg{

            border: 2px solid black;
            background-color: rgb(212, 49, 26);
            padding:5px;
            width:125px;
            text-align:center;

            border-radius: 5px;

            font-size:20px;
            font-weight:bold;
            color:rgb(255 255 255);

            box-shadow: 0 1px 10px rgba(0, 0, 0, 0.5);
            z-index:99;
        }
    
        .name{
            border-left: 2px solid black;  
            border-right: 2px solid black; 
            border-bottom: 2px solid black; 
            border-top: none;   

            padding:5px;
            border-bottom-left-radius: 5px;  
            border-bottom-right-radius: 5px; 
            width:125px;
            text-align:center;

            font-size:15px;
            font-weight:bold;
            color:rgb(0 0 0);
            background-color: rgb(163, 162, 162);
        }
        .player-name{
            border-left: 2px solid black;  
            border-right: 2px solid black; 
            border-bottom: 2px solid black; 
            border-top: none;   

            padding:5px;
            border-bottom-left-radius: 5px;  
            border-bottom-right-radius: 5px; 
            min-width:50px;
            text-align:center;

            font-size:15px;
            font-weight:bold;
            color:rgb(0 0 0);
            background-color: rgb(255, 213, 15);

            z-index:1;
        }
        #card1{visibility: hidden}
        #card2{visibility: hidden}
        #card3{visibility: hidden}
        #card4{visibility: hidden}
        #card5{visibility: hidden}


    </style>
</head>
<body>


    <form id="balanceForm" method="post">
        <input type="hidden" id="storedBalance" name="storedBalance" value="">
        <input type="submit" name="button1" value="saveCredits"/>
    </form>
    

    
        <div id = 'logoutContainer'>
            <a href = "logout.php">logout</a>
        </div>
        <div id = 'balanceContainer' class = 'balance-container'>
          
            <br>
        </div>
        <div id = 'table' class = 'table'>
            <div id = 'resultsContainer' class = 'results-container'>

                <br>
                <div id = "winResult" class = "win-result"></div>

            </div>

            <div id = 'boardContainer' class = 'board-container'>
                <div id = "board" class = "board">
                    <div id="potContainer" class = 'pot-container'>
                        <div id = "pot" class = "pot">L£0</div>

                    </div>
                    <div id = "boardContentContainer" class = 'board-content-container'>
                      
                     
                        <div id = 'communityCards' class = 'community-cards'></div>
                        <div id = 'communityCardImages' class='community-card-images'>
                            <div class="card-wrapper">
                                <div id = "card1" class = 'card'></div>
                            </div>
                            <div class="card-wrapper">
                                <div id = "card2" class = 'card'></div>
                            </div>
                            <div class="card-wrapper">
                                <div id = "card3" class = 'card'></div>
                            </div>
                            <div class="card-wrapper">
                                <div id = "card4" class = 'card'></div>
                            </div>
                            <div class="card-wrapper">
                                <div id = "card5" class = 'card'></div>
                            </div>
                        
                        </div>
                       
                    </div>
                </div>
            </div>

            <div id = "hotbar" class="hotbar">
                <div id="handContainer" class = 'hand-container'>

             </div>

            
   
               
            </div>

            <div id = "opponentCardsContainer" class = "opponent-cards-container">
                
             
                <div id = 'opponent1Images' class='opponent-1-images hand'>
                    <div id = "hideContainer1" class="hider-container">
                        <div class="card-hider">
                            <img class = "cardHider" src = 'light/BACK.png'>
                        </div>
                        <div class="card-hider">
                            <img class = "cardHider" src = 'light/BACK.png'>
                        </div>
                    </div>
                    <div class="card-wrapper">
                        <div id = "opponent1Card1" class = 'card'></div>
                    </div>
                    <div class="card-wrapper">
                        <div id = "opponent1Card2" class = 'card'></div>
                    </div>
                    <div id = "opp1ResultContainer">
      
                        <div id="opp1BalanceValue" class = 'red-bg'>0</div>
                        <div id = "opp1Name"class = 'name'>Dallas</div>
                        <div id="opp1Result"></div> 
                    </div>
                </div>


                <div id = 'opponent2Images' class='opponent-2-images hand'>
                    <div id = "hideContainer2" class="hider-container">
                        <div class="card-hider">
                            <img class = "cardHider" src = 'light/BACK.png'>
                        </div>
                        <div class="card-hider">
                            <img class = "cardHider" src = 'light/BACK.png'>
                        </div>
                    </div>
                    <div class="card-wrapper">
                        <div id = "opponent2Card1" class = 'card'></div>
                    </div>
                    <div class="card-wrapper">
                        <div id = "opponent2Card2" class = 'card'></div>
                    </div>
                    <div id = "opp2ResultContainer" >
  
                        <div id="opp2BalanceValue" class = 'red-bg'>0</div>
                        <div id = "opp2Name"class = 'name'>G-Money</div>
                        <div id="opp2Result"></div>
                    </div>

                </div>

                <div id = 'opponent3Images' class='opponent-3-images hand'>
                    <div id = "hideContainer3" class="hider-container">
                        <div class="card-hider">
                            <img class = "cardHider" src = 'light/BACK.png'>
                        </div>
                        <div class="card-hider">
                            <img class = "cardHider" src = 'light/BACK.png'>
                        </div>
                    </div>
                    <div id = "opp3ResultContainer" >

                        <div id="opp3BalanceValue" class = 'red-bg'>0</div>
                        <div id = "opp3Name"class = 'name'>Gary</div>
                        <div id="opp3Result"></div>
                    </div>
                    <div class="card-wrapper">
                        <div id = "opponent3Card1" class = 'card'></div>
                    </div>
                    <div class="card-wrapper">
                        <div id = "opponent3Card2" class = 'card'></div>
                    </div>
                  
                </div>


                <div id = "playerResultContainer">

                  <div id = 'handCardImages' class='hand-card-images hand'>
                    <div id = 'innerPlayerResultContainer'>

                        <div id = "balance" class = "balance red-bg" > 
                            <?php echo $creditsText['credits'] ?>
                        </div>
                        <div id = 'playerName' class = 'player-name'>You</div>
                        <div id = "result" class = "result"></div>
                    </div>
                    <div class="card-wrapper">
                        <div id = "handCard1" class = 'card'></div>
                    </div>
                    <div class="card-wrapper">
                        <div id = "handCard2" class = 'card'></div>
                    </div>
                </div>
                       
                        <div id = "hand" class = "hand"></div>  

                    </div>
               
            </div>
      
          
            <div id = 'buttonContainer' class = 'button-container'>
                <!-- temp buttons -->
                <!-- 
                <button onclick="dealPlayerHand()"type = "button" id = "dealButton">deal</button>
                <button onclick="bet()"type = "button" id = "betButton">bet</button>
                <button onclick="checkPlayerHand()"type = "button" id = "checkHand">No more action!</button>
                <button onclick="opponentDeal()"type = "button" id = "opponentDeal">opponentDeal</button>
                <button onclick="checkOppHand()"type = "button" id = "checkOppHand">checkOppHand</button>
                <button onclick="checkWhoWins()"type = "button" id = "checkWhoWins">checkWhoWins</button> -->
                <!-- <button onclick="flipCommunityCards()"type = "button" id = "flipButton">flip</button> -->
                
                <div class="mainButtonsContainer">
                    <button onclick="playerFold()"type = "button" id = "foldButton" class = 'fold-button'>fold</button>
                    <button onclick="check()"type = "button" id = "checkButton" class = 'check-button'>check</button>
                    
                    <button onclick="raise()"type = "button" id = "raiseButton" class = 'raise-button'>raise</button>
                    <div id = "raiseContainer" class = 'raise-container'>
                        <input type = "text" id = "howMuchRaise" class = 'how-much-raise'>how much?</input>
                        <button onclick="submitRaise()"type = "button" id = "submitRaiseButton" class = 'submit-raise-button'>submit</button>
                    </div>
                </div>
                <button onclick="play()"type = "button" id = "playButton" class = 'play-button'>play</button>
                <button onclick="next()"type = "button" id = "nextButton" class = 'next-button'>next</button>
             
            </div>
        </div>
    </div>
    <!--TEMP BUTTONS, TO CHECK FUNCTIONS
    <button onclick="combineArrays()"type = "button" id = "combine">combine</button>
    <button onclick="checkFlush()"type = "button" id = "checkFlush">checkFlush</button>
    <button onclick="checkPair()"type = "button" id = "checkPair">checkPair</button>
    <button onclick="checkThree()"type = "button" id = "checkThree">checkThree</button>
    <button onclick="checkFour()"type = "button" id = "checkFour">checkFour</button>
    <button onclick="checkFull()"type = "button" id = "checkFull">checkFull</button>
    <button onclick="checkStraight()"type = "button" id = "checkStraight">checkStraight</button>
    -->
    

<script> //? for the river:
//? create three radnom numbers (flop)
//? then one more (turn) and then the last one (river)

//? after each turn, you will bet
//jack = 11
//queen = 12
//king = 13
//ace 1


let stage = 1;
//stage 0 = pre flop bet
//stage 1 = flop
//stage 2 = bet
//stage 3 = turn
//stage 4 = bet
//stage 5 = river
//stage 6 = bet

//*ORDER OF HANDS (ascending order)
//*one pair
//*two pair
//*three of a kind
//*straight
//*flush
//*full house
//*four of a kind
//*straight flush
//*royal flush




const cardImages = {
    'BACK': 'light/BACK.png',
    //CLUBS
    '1_clubs': 'light/A-C.png',
    '2_clubs': 'light/2-C.png',
    '3_clubs': 'light/3-C.png',
    '4_clubs': 'light/4-C.png',
    '5_clubs': 'light/5-C.png',
    '6_clubs': 'light/6-C.png',
    '7_clubs': 'light/7-C.png',
    '8_clubs': 'light/8-C.png',
    '9_clubs': 'light/9-C.png',
    '10_clubs': 'light/10-C.png',
    '11_clubs': 'light/J-C.png',
    '12_clubs': 'light/Q-C.png',
    '13_clubs': 'light/K-C.png',
    //DIAMONDS
    '1_diamonds': 'light/A-D.png',
    '2_diamonds': 'light/2-D.png',
    '3_diamonds': 'light/3-D.png',
    '4_diamonds': 'light/4-D.png',
    '5_diamonds': 'light/5-D.png',
    '6_diamonds': 'light/6-D.png',
    '7_diamonds': 'light/7-D.png',
    '8_diamonds': 'light/8-D.png',
    '9_diamonds': 'light/9-D.png',
    '10_diamonds': 'light/10-D.png',
    '11_diamonds': 'light/J-D.png',
    '12_diamonds': 'light/Q-D.png',
    '13_diamonds': 'light/K-D.png',
    //HEARTS
    '1_hearts': 'light/A-H.png',
    '2_hearts': 'light/2-H.png',
    '3_hearts': 'light/3-H.png',
    '4_hearts': 'light/4-H.png',
    '5_hearts': 'light/5-H.png',
    '6_hearts': 'light/6-H.png',
    '7_hearts': 'light/7-H.png',
    '8_hearts': 'light/8-H.png',
    '9_hearts': 'light/9-H.png',
    '10_hearts': 'light/10-H.png',
    '11_hearts': 'light/J-H.png',
    '12_hearts': 'light/Q-H.png',
    '13_hearts': 'light/K-H.png',
    //SPADES
    '1_spades': 'light/A-P.png',
    '2_spades': 'light/2-P.png',
    '3_spades': 'light/3-P.png',
    '4_spades': 'light/4-P.png',
    '5_spades': 'light/5-P.png',
    '6_spades': 'light/6-P.png',
    '7_spades': 'light/7-P.png',
    '8_spades': 'light/8-P.png',
    '9_spades': 'light/9-P.png',
    '10_spades': 'light/10-P.png',
    '11_spades': 'light/J-P.png',
    '12_spades': 'light/Q-P.png',
    '13_spades': 'light/K-P.png',


}

//!PROBLEM, I dont know how do have 'limits' on my cards, like
//! you cant draw 5 jacks right? but how do I limit that?
//?maybe make an object filled with all card types, and then subract when cards are drawn?
//! wait, I have to randomize the suites too, uhh.

let deck = {
    1: 4, //aces
    2: 4,
    3: 4,
    4: 4,
    5: 4,
    6: 4,
    7: 4,
    8: 4,
    9: 4,
    10: 4,
    11: 4, //jacks
    12: 4, //queens
    13: 4  //kings
};
//*making an array of suites, then when a random value from decks is created, it's then assigned a random suite
let suites = ['hearts', 'diamonds', 'clubs', 'spades']
let values = [1,2,3,4,5,6,7,8,9,10,11,12,13];

    
//*AND THENNN, AFTER A RANDOM CARD AND SUITE IS MADE
//*THEY'RE PUSHED INTO AN ARRAY
//*AND THEN THE ARRAY IS CHECKED BEFORE GENERATING ANOTHER CARD TO PREVENT DUPLICARE VALUES

let cardsDealt = [];




const balanceText = document.getElementById('balance')

let balance =  <?php echo $creditsText['credits']; ?>;
balanceText.innerHTML = `L£${numberWithSpaces(balance)}`;

const button = document.getElementById('temp')

console.log(`balance: ${balance}`)
console.log('hello!')


const keysArray = Object.keys(deck)
// console.log(keysArray.length) //!*you have to push all keys into an array, and then get the array length to find the amount of keys in an object


let wholeHandVals = [];
let wholeHandSuites = [];

let handVals = [];
let handSuites =[];

let communityVals = [];
let communitySuites =[];

function generateRandNums(max){
    //*function to generate random numbers
    return Math.floor(Math.random()*max);
}


// Get all keys from the object



function numberWithSpaces(x) { //this function adds spaces to big numbers, like turning 1000000 into 1 000 000
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}



function generateCardForHand(whichHand) {//by default, the hand that is drawin is a community card
    let randomCard, randomSuite, card;
    
    do { //generate random card here
        randomCard = generateRandNums(values.length) + 1;
        randomSuite = suites[generateRandNums(suites.length)];
        card = randomCard + "_" + randomSuite;
    } while (cardsDealt.includes(card));

    cardsDealt.push(card);
    switch (whichHand) {
        case 'community':
            communityVals.push(randomCard);
            communitySuites.push(randomSuite);
            break;
            
        case 'player':
            handVals.push(randomCard);
            handSuites.push(randomSuite);
            break;
            
        case 'opp1':
            oppHandVals1.push(randomCard);
            oppHandSuites1.push(randomSuite);
            break;
            
        case 'opp2':
            oppHandVals2.push(randomCard);
            oppHandSuites2.push(randomSuite);
            break;
            
        case 'opp3':
            oppHandVals3.push(randomCard);
            oppHandSuites3.push(randomSuite);
            break;
            
        default:
            alert('INVALID HAND!!!!!!');
    }

    return card;
}

function generateHandCard(){

}





function setCardImage(card,which) {
    // console.log(card)
    // console.log(which)
    let cardDiv = document.getElementById('card' + which.toString());
    cardDiv.style.backgroundImage = `url(${cardImages[card]})`;
}
function setCardImageDeal(card,which) { //*I KNOW IT'S BAD PRACTICE SHUT UP
    // console.log(card)
    // console.log(which)

    let cardDiv = document.getElementById('handCard' + which.toString());
    cardDiv.style.backgroundImage = `url(${cardImages[card]})`;
}
function setOpponentCardImageDeal(card,which,whichOpp) { //*I KNOW IT'S BAD PRACTICE SHUT UP
    // console.log(card)
    // console.log(which)
    // console.log(whichOpp)
    let cardDiv = document.getElementById('opponent' + whichOpp.toString() + 'Card' + which.toString());
    cardDiv.style.backgroundImage = `url(${cardImages[card]})`;
}




let communityCardsArray = [];
let cardDrawn;

let playButton = document.querySelector('.play-button')
let mainButtons = document.querySelector('.mainButtonsContainer')
let nextButton = document.getElementById('nextButton')

const funnyMusic = new Audio('funnyMusic.mp3');

const form = document.getElementById('balanceForm');//form to submit for php

const flipCard = new Audio('flipcard.wav')
const cardDrop = new Audio('carddrop.wav')
const shortFlip = new Audio('shortFlip.wav')
const moneySound = new Audio('money_sound.mp3')


const knocks = [
    new Audio('knock_sound_2.wav'),
    new Audio('knock_sound_3.wav'),
    new Audio('knock_sound_4.wav'),
    new Audio('knock_sound_5.wav')
];
knocks.forEach(knock => {
    knock.volume = 0.5; // Set volume to 50%
});

//all the community cards

const commCardsArray = [
    card1 = document.getElementById('card1'),
    card2 = document.getElementById('card2'),
    card3 = document.getElementById('card3'),
    card4 = document.getElementById('card4'),
    card5 = document.getElementById('card5')
]


let ifRaised = false;//checking if the bot or player has raised, if they have, instead of checking the next bot has to call to that value
function flipCommunityCards(){
console.log(commCardsArray)

    // console.log(cardsDealt)
    //*function to display the random numbers, this function calls the generateNums() function
    switch(stage){
        case 0:

            // console.log('preflop bet')
            for (let i = 0; i < 3; i++) {
                opponentDecision(i+1)
            }
            mainButtons.style.visibility = 'hidden'
            nextButton.style.visibility = 'visible'
            break
        case 1:// Flop

            for (let i = 0; i < 3; i++) {
                setTimeout(() => {
                    const cardDrawn = generateCardForHand('community'); // generates a card for the community hand
                    commCardsArray[i].style.visibility = 'visible'
                    setCardImage(cardDrawn, i + 1);
                            cardDrop.play()
                 }, 500 * (i + 1)); 

            }


            mainButtons.style.visibility = 'visible'
            nextButton.style.visibility = 'hidden'
            playButton.style.visibility = 'hidden'

            opp1ResultDiv.innerHTML = ""
            opp2ResultDiv.innerHTML = ""
            opp3ResultDiv.innerHTML = ""

            break;
        case 2:

            // console.log('flop bet')
            for (let i = 0; i < 3; i++) {
                setTimeout(() => {
                    opponentDecision(i+1) //call opponent decision three times, each time with a different opponent
        
                }, 500 * (i + 1)); 
            }
            mainButtons.style.visibility = 'hidden'
            nextButton.style.visibility = 'visible'
            break;

            
        case 3: // Turn
            const turnCard = generateCardForHand('community');
            commCardsArray[3].style.visibility = 'visible'
            setCardImage(turnCard, 4);

            cardDrop.play()

            // console.log('turn')
            opp1ResultDiv.innerHTML = ""
            opp2ResultDiv.innerHTML = ""
            opp3ResultDiv.innerHTML = ""

            mainButtons.style.visibility = 'visible'
            nextButton.style.visibility = 'hidden'
        break;

        case 4:
            // console.log('turn bet')
           for (let i = 0; i < 3; i++) {
                setTimeout(() => {
                    opponentDecision(i+1) //call opponent decision three times, each time with a different opponent
        
                }, 500 * (i + 1)); 
            }

            
            mainButtons.style.visibility = 'hidden'
            nextButton.style.visibility = 'visible'
            break;
        case 5: // River
            const riverCard = generateCardForHand('community');
            commCardsArray[4].style.visibility = 'visible'
            setCardImage(riverCard, 5);

            cardDrop.play()
            
            opp1ResultDiv.innerHTML = ""
            opp2ResultDiv.innerHTML = ""
            opp3ResultDiv.innerHTML = ""

            mainButtons.style.visibility = 'visible'
            nextButton.style.visibility = 'hidden'
        break;
        case 6:
            // console.log('river bet')
           for (let i = 0; i < 3; i++) {
                setTimeout(() => {
                    opponentDecision(i+1) //call opponent decision three times, each time with a different opponent
        
                }, 500 * (i + 1)); 
            }


            mainButtons.style.visibility = 'hidden'
            nextButton.style.visibility = 'visible'
            break;
        case 7:
            mainButtons.style.visibility = 'hidden'
            nextButton.style.visibility = 'visible'
            
            let hiders = document.getElementsByClassName('cardHider') //declaring the back card images

            for (let i = 0; i < hiders.length; i++){
                 setTimeout(() => {
                    hiders[i].style.display = 'none';
                    shortFlip.load();     
                    shortFlip.play();

                 }, 300 * (i + 1)); 
            }

            
   

            opp1ResultDiv.innerHTML = ""
            opp2ResultDiv.innerHTML = ""
            opp3ResultDiv.innerHTML = ""

            setTimeout(() => checkOppHand(), 600);  // First call after 0.5 seconds
            setTimeout(() => checkOppHand(), 1200); // Second call after 1 second
            setTimeout(() => checkOppHand(), 1800); // Third call after 1.5 seconds

            setTimeout(() => checkPlayerHand(), 2100);
            setTimeout(() => checkWhoWins(), 2400);

            setTimeout(() => {
                pot = 0;  // Reset pot to 0
                potDiv.innerHTML = `L£${pot}`; 
            }, 2700);

            

            break;
        case 8:
            document.getElementById('storedBalance').value = balance;
            form.submit();
            break;
        default:
            console.log('bruh error')

    }
    stage++;
}

let hand = []
let dealt = false;
function dealPlayerHand() {
    if (handVals.length === 0) {
        for (let i = 0; i < 2; i++) {
            let cardDrawn = generateCardForHand('player'); // false means it's not a community card
            setCardImageDeal(cardDrawn, i + 1);
        }
    }
}
dealPlayerHand()

let opponentHand1 = [];
let opponentHand2 = [];
let opponentHand3= [];

let oppHandVals1 = [];
let oppHandVals2 = [];
let oppHandVals3 = [];
let oppHandSuites1 = [];
let oppHandSuites2 = [];
let oppHandSuites3 = [];
 
let opponentDealing = 1;
let opponentDealt = false;

let whichOpponent = 1;
let whichOpponentCard = 1;

let whichOppHandVals = oppHandVals1
let whichOppHandSuites = oppHandSuites1

function opponentDeal(){
    let cardDrawn;
        for(let i = 0; i < 2; i++){

            if(whichOpponent === 1){

                cardDrawn = generateCardForHand('opp1')
                // console.log('opponentHand1: ' + opponentHand1)
            }else if(whichOpponent === 2){

                cardDrawn = generateCardForHand('opp2')

                // console.log('opponentHand2: ' + opponentHand2)
            }else if(whichOpponent === 3){

                cardDrawn = generateCardForHand('opp3')

                // console.log('opponentHand3: ' + opponentHand3)
            }

            let whichCard = i +1
            
            // setCardImageDeal(cardDrawn,whichCard)
            setOpponentCardImageDeal(cardDrawn,whichCard,whichOpponent)
        }
        whichOpponent++;
        // console.log(whichOpponent)
    // console.log('cards dealt ' + cardsDealt)
}
opponentDeal()
opponentDeal()
opponentDeal()

function revealOpponentHands(){
    setOpponentCardImageDeal(cardDrawn,whichCard,whichOpponent)

}

function combineArrays(handVals, communityVals, handSuites, communitySuites) {
    // Combine the passed-in value and suit arrays
    const wholeHandVals = handVals.concat(communityVals);
    const wholeHandSuites = handSuites.concat(communitySuites);

    // Sort the combined wholeHandVals array numerically
    wholeHandVals.sort(function(a, b) {
        return a - b;
    });

    // console.log(handVals)
    // console.log('whole hand values: ' + wholeHandVals);
    // console.log('whole hand suites: ' + wholeHandSuites);
    return{
        wholeHandVals,
        wholeHandSuites
    }
}
// let tempArray = ["diamonds", "diamonds", "hearts","hearts","hearts","hearts","spades"]

function checkFlush(wholeHandSuites){
    //*if suite appears 5 times in whole hand, return true
    for(let index = 0; index < suites.length; index++){ //checking for every possible suite if is contained in the array of suites in hand
        let searchString = suites[index];
        let count = 0;  

        for(let i = 0; i < wholeHandSuites.length; i++){
            if(wholeHandSuites[i]===searchString){//if it's found a suite that matches 'searchString' which is checked for every suite 
                count++;
            }
            if(count >= 5){
                // console.log('is a flush!')
                return true;
            }
        }
    }
    // console.log('not a flush :(')
    return false;
    
}

let startingIndex = 0;
let difference = -1;
// let tempArray = [2,3,3,4,5,6,7]
function checkStraight(hand){


//*checking through all the values in the array, comapring them to the next value above it, by the difference variable
    for(let index = 0; index < hand.length; index++){
        difference = -1; 

        for(let i = 1; i < hand.length - index; i++){
            startingIndex = hand[0]
            if(startingIndex - hand[index + i] === difference){
                difference--;
                // console.log('passed')
            }else{
                startingIndex = hand[1]
                break
            }
        }
        if(difference <= -5){
            // console.log('is a straight!')
            return true;
        }
    }
    // console.log('not a straight :(')
    return false;
}

let pairsFound = [];

function checkPair(wholeHandVals, excludeVal = null) {
    let pairNum = 0;
    let countedPairs = new Set();

    for(let index = 0; index < values.length; index++) {
        let searchPair = values[index];
        let pairCount = 0;  

        // Skip the value if it's in the exclude set or already counted
        if (countedPairs.has(searchPair) || searchPair === excludeVal) {
            continue;
        }

        for(let i = 0; i < wholeHandVals.length; i++) {
            if (wholeHandVals[i] === searchPair) {
                pairCount++;
            }
            if (pairCount === 2) {
                pairNum++;
                countedPairs.add(searchPair);  // Mark this pair as found
                break;
            }
        }
    }
    // console.log(countedPairs)
    return pairNum;

}

function checkThree(wholeHandVals){

    for(let index = 0; index < values.length; index++){ //checking for every possible suite if is contained in the array of suites in hand
        let searchThree = values[index];
        let threeCount = 0;  

        for(let i = 0; i < wholeHandVals.length; i++){
            if(wholeHandVals[i]===searchThree){//if it's found a suite that matches 'searchString' which is checked for every suite 
                threeCount++;
            }
            if(threeCount === 3){
                // console.log('is a three!')
                return searchThree;
            }
        }
    }
    // console.log('not a three :(')
    return false;

}

function checkFour(wholeHandVals){
    for(let index = 0; index < values.length; index++){ //checking for every possible suite if is contained in the array of suites in hand
        let searchFour = values[index];
        let fourCount = 0;  

        for(let i = 0; i < wholeHandVals.length; i++){
            if(wholeHandVals[i]===searchFour){//if it's found a suite that matches 'searchString' which is checked for every suite 
                fourCount++;
            }
            if(fourCount === 4){
                // console.log('is a four!')
                return true;
            }
        }
    }
    // console.log('not a four :(')
    return false;
}
function checkFull(wholeHandVals){
    //* if checkPair, and checkThree both return true, return true
    let threeVal = checkThree(wholeHandVals);  // Find if there is a three-of-a-kind

    if (threeVal) {
        // Now check if there's exactly one pair excluding the three-of-a-kind value
        if (checkPair(wholeHandVals, threeVal) === 1) {
            return true; // Full house found
        }
    }
    return false; // Not a full house
    
}

let resultDiv = document.getElementById('result')
let resultText = ''
let winResultDiv = document.getElementById('winResult')

let playerHandValue = 0;
let opp1HandValue = 0;
let opp2HandValue = 0;
let opp3HandValue = 0;

let highestHandValue = 0;//if handValue is greater than highestHand value, you win!
function checkPlayerHand() {

    
    // Generate the combined hand of player and community cards
    let { wholeHandVals, wholeHandSuites } = combineArrays(handVals, communityVals, handSuites, communitySuites);
    // Check for different hand types
    let resultText = '';
    if (checkStraight(wholeHandVals)) {
        resultText = 'Straight';
        playerHandValue  = 8;
    } else if (checkFour(wholeHandVals)) {
        resultText = 'Four of a kind!';
        playerHandValue  = 7;
    } else if (checkFull(wholeHandVals)) {
        resultText = 'Full house!';
        playerHandValue  = 6;
    } else if (checkFlush(wholeHandSuites)) {
        resultText = 'Flush!';
        playerHandValue  = 5;
    } else if (checkThree(wholeHandVals)) {
        resultText = 'Three of a kind!';
        playerHandValue  = 4;
    } else if (checkPair(wholeHandVals)) {
        resultText = checkPair(wholeHandVals) + ' pairs!';
        playerHandValue  = checkPair(wholeHandVals);
    } else {
        resultText = 'Wow nothing!';
        playerHandValue  = 0;
    }

    // Display the result and update the pot and balance
    resultDiv.innerHTML = resultText;
    // winResultDiv.innerHTML = `The value of your hand is ${playerHandValue}`;
    
    potDiv.innerHTML = (`L£${pot}`);
    handDiv.innerHTML = balance;
}

let oppHandValNum = 0;


let opp1ResultDiv = document.getElementById('opp1Result');
let opp2ResultDiv = document.getElementById('opp2Result');
let opp3ResultDiv = document.getElementById('opp3Result');


function checkOppHand(){
    oppHandValNum++

    if(oppHandValNum === 1){ //what the freak does opphandvalnum mean

        whichOppHandVals = oppHandVals1
        whichOppHandSuites = oppHandSuites1

    }else if(oppHandValNum === 2){

        whichOppHandVals = oppHandVals2
        whichOppHandSuites = oppHandSuites2

    }else if(oppHandValNum===3){

        whichOppHandVals = oppHandVals3 
        whichOppHandSuites = oppHandSuites3

    }
    else{
        console.log('No opps left (opper stopper)')
    }

    let handValue = 0;

    let { wholeHandVals, wholeHandSuites } = combineArrays(whichOppHandVals, communityVals, whichOppHandSuites, communitySuites);
    
    
    // console.log(wholeHandVals)
    // console.log(wholeHandSuites)
    // Check for different hand types
    let resultText = '';
    if (checkStraight(wholeHandVals)) {
        resultText = 'Straight';
        handValue = 8;
    } else if (checkFour(wholeHandVals)) {
        resultText = 'Four of a kind!';
        handValue = 7;
    } else if (checkFull(wholeHandVals)) {
        resultText = 'Full house!';
        handValue = 6;
    } else if (checkFlush(wholeHandSuites)) { 
        resultText = 'Flush!';
        handValue = 5;
    } else if (checkThree(wholeHandVals)) {
        resultText = 'Three of a kind!';
        handValue = 4;
    } else if (checkPair(wholeHandVals)) {
        resultText = checkPair(wholeHandVals) + ' pairs!';
        handValue = checkPair(wholeHandVals);
        // console.log(handValue)

    } else {
        resultText = 'Wow nothing!';
        handValue = 0.5;
    }




    if (oppHandValNum === 1) {
        opp1HandValue = handValue;
    } else if (oppHandValNum === 2) {
        opp2HandValue = handValue;
    } else if (oppHandValNum === 3) {
        opp3HandValue = handValue;
    }

    // console.log(opp1HandValue)
    // console.log(opp2HandValue)
    // console.log(opp3HandValue)


 

    if (opponentFold1 === true) {
        opp1ResultDiv.innerHTML = 'FOLDEDDD'
        opp1HandValue = 0
    }else if(oppHandValNum === 1){
        opp1ResultDiv.innerHTML = resultText;
    }

    if (opponentFold2 === true) {
        opp2ResultDiv.innerHTML = 'FOLDEDDD'
        opp2HandValue = 0
    }else if(oppHandValNum === 2){
        opp2ResultDiv.innerHTML = resultText;
    }

    if (opponentFold3 === true) {
        console.log('HIIII')
        opp3ResultDiv.innerHTML = 'FOLDEDDD'
        opp3HandValue = 0

    }else if(oppHandValNum === 3){
        opp3ResultDiv.innerHTML = resultText;

    }



    // console.log(oppHandValNum)
    resultDiv.innerHTML = resultText;
    // winResultDiv.innerHTML = `The value of your hand is ${playerHandValue}`;
    // winResultDiv.innerHTML =`The value of opponent ${oppHandValNum}'s hand is ${handValue}`;
}





function highCard(array){//function takes the winners array (for less confusion)
    console.log(`Tie between: ${winners.join(', ')}`)
    console.log(array)

    // console.log(oppHandVals1)
    // console.log(oppHandVals2)
    // console.log(oppHandVals3)
    // console.log(handVals)

    // console.log(`opp1 sum: ${getSum(oppHandVals1)}`)
    // console.log(`opp2 sum: ${getSum(oppHandVals2)}`)
    // console.log(`opp3 sum: ${getSum(oppHandVals3)}`)
    // console.log(`handVals sum: ${getSum(handVals)}`)

    let highestCards = {};
    let sums = {}

    array.forEach(winner => { //looping thtough all the winners, and adding the highest card in their hand to the highestCards object
        if (winner === 'Opponent 1') {
            highestCards[winner] = getHighestCard(oppHandVals1);
            sums[winner] = getSum(oppHandVals1);
        } else if (winner === 'Opponent 2') {
            highestCards[winner] = getHighestCard(oppHandVals2);
            sums[winner] = getSum(oppHandVals2);
        } else if (winner === 'Opponent 3') {
            highestCards[winner] = getHighestCard(oppHandVals3);
            sums[winner] = getSum(oppHandVals3);
        } else if (winner === 'Player') {
            highestCards[winner] = getHighestCard(handVals);
            sums[winner] = getSum(handVals);
        }
    });
    console.log('Highest cards:', highestCards);
    console.log('Sums :', sums);

    let highestCardValue = Math.max(...Object.values(highestCards));
    let highestCardSum = Math.max(...Object.values(sums));


    console.log(highestCardValue)
    // let finalWinners = Object.keys(highestCards).filter(player => highestCards[player] === highestCardValue); //takes the key that belongs to the highest value in the highestCards object
    let finalFinalWinners = Object.keys(sums).filter(player => sums[player] === highestCardSum); //Grabs the highest sum of values
     

    if (finalFinalWinners.length > 1) {
        winResultDiv.innerHTML = `It's still a tie between: ${finalFinalWinners.join(', ')}`;

    } else {
        winResultDiv.innerHTML = `The winner is: ${finalFinalWinners[0]} by high card ${highestCardValue}`;
    }

}
// Function that calculates the sum of an array's values (I stole it)(also I'm not using this function anymore)
function getSum(arr) {
    return arr.reduce((a, b) => a + b, 0);
}
// Function that calculates the highest of an array's values (I stole it)
function getHighestCard(arr) {
    return Math.max(...arr);  // Returns the highest value in the array
    //...arr lets use use an array in math.max function, since normally it CANT do that
}


let winners = [];
function checkWhoWins(){


    winners.push('Opponent 3'); //opponent three is default winner

    // let winner = 'Opponent 3';
    let highestHandValue = opp3HandValue;

    //opp1
    if (opp1HandValue > highestHandValue) {
        winners = ['Opponent 1']; //reset the array, ONLY ONE WINNER
        highestHandValue = opp1HandValue;

    }else if (opp1HandValue === highestHandValue){
        winners.push('Opponent 1');

    }
    //opp2
    if (opp2HandValue > highestHandValue) {
        winners = ['Opponent 2'];
        highestHandValue = opp2HandValue;
    }else if (opp2HandValue === highestHandValue){
        winners.push('Opponent 2');

    }
    //opp3
    if (playerHandValue > highestHandValue) {
        winners = ['Player'];
        highestHandValue = playerHandValue;

    }else if (playerHandValue === highestHandValue){
        winners.push('Player');

    }
    // console.log(winners)



    let botBalance1 = 1000000;
    let botBalance2 = 1000000;
    let botBalance3 = 1000000;
    
    const opp1BalanceText = document.getElementById('opp1BalanceValue')
    const opp2BalanceText =document.getElementById('opp2BalanceValue')
    const opp3BalanceText =document.getElementById('opp3BalanceValue')
    
    if (winners.length > 1) {//there is a tie
        highCard(winners) //tiebreak with highcard
    } else {
        winResultDiv.innerHTML = (`The winner is: ${winners[0]}`);
    }
    // winResultDiv.innerHTML = `${winner} wins `

    switch (winners[0]){

        case 'Player':
            // alert('player')
            balance += pot
            balanceText.innerHTML =  (`L£${numberWithSpaces(balance)}`);
            document.getElementById('storedBalance').value = balance;


            break;
        case 'Opponent 1':
            // alert('Opponent 1')
            botBalance1 += pot;
            opp1BalanceText.innerHTML = (`L£${numberWithSpaces(balance)}`)
            break;

        case 'Opponent 2':
            // alert('Opponent 2')
            botBalance2 += pot;
            opp2BalanceText.innerHTML = (`L£${numberWithSpaces(balance)}`)
            break;

        case 'Opponent 3':
            // alert('Opponent 3')
            botBalance3 += pot;
            opp3BalanceText.innerHTML = (`L£${numberWithSpaces(balance)}`)
            break;

    }

 
}






function check(){
    console.log('checked')
}
const raiseContainerDiv = document.getElementById('raiseContainer')
let raiseState = 0;
function raise(){
    console.log('called')

    if(raiseState===0){
        raiseState++
        raiseContainerDiv.style.display = 'block'
    }else{
        raiseState = 0;
        raiseContainerDiv.style.display = 'none'
    }

}
let pot = 0;
let howMuch = 10;
let submitRaiseButtonDiv = document.getElementById('submitRaiseButton')
let howMuchRaiseDiv = document.getElementById('howMuchRaise')

function submitRaise(){

    if(balance >= parseInt(howMuchRaiseDiv.value)){
        pot += parseInt(howMuchRaiseDiv.value)
        balance -= parseInt(howMuchRaiseDiv.value)
        balanceText.innerHTML = `L£${numberWithSpaces(balance)}`

        potDiv.innerHTML = (`L£${numberWithSpaces(pot)}`)
        flipCommunityCards()
    
    }else{
        alert('ur broke')
    }



}

let potDiv = document.getElementById('pot')
let handDiv = document.getElementById('balance') 
function bet(){
    balance -=howMuch
    pot += howMuch
    potDiv.innerHTML = (`L£${numberWithSpaces(pot)}`)
    handDiv.innerHTML = balance
}

let opponentFold1 = false;
let opponentFold2 = false;
let opponentFold3 = false;


let botBalance1 = 1000000;
let botBalance2 = 1000000;
let botBalance3 = 1000000;

const opp1BalanceText = document.getElementById('opp1BalanceValue')
const opp2BalanceText =document.getElementById('opp2BalanceValue')
const opp3BalanceText =document.getElementById('opp3BalanceValue')

opp1BalanceText.innerHTML = (`L£${numberWithSpaces(botBalance1)}`)
opp2BalanceText.innerHTML = (`L£${numberWithSpaces(botBalance2)}`)
opp3BalanceText.innerHTML = (`L£${numberWithSpaces(botBalance3)}`)


let raiseWhaat;//VALUE OF HOW MUCH THE BOT HAS RAISED

function opponentDecision(whichOpponent){

    // console.log(opponentFold1)
    // console.log(opponentFold2)
    // console.log(opponentFold3)


    let randNum = generateRandNums(100) //four possible decisions the bots can make
    // console.log(whichOpponent)
    // console.log(randNum)

    if(whichOpponent===1 && opponentFold1 === false){
        if(randNum === 0){//*FOLDING----------
            // console.log(`opponent ${1} folded`)
            opp1ResultDiv.innerHTML = 'folded'
            opponentFold1 = true
        }
        if((randNum > 1 && randNum <50)){//*CHECKING/CALLING------------
            const randomIndex = Math.floor(Math.random() * knocks.length);
            knocks[randomIndex].load();
            knocks[randomIndex].play();//plyay a random knock
            // console.log(`opponent ${1} checked`)

            opp1ResultDiv.innerHTML = 'checked'


        }
        if((randNum >= 50 && randNum <100)){ //*RASING----------
            moneySound.play()
            // console.log(`opponent ${1} raised`)
            botRaise(botBalance1) //raise with the first bot's balance
            botBalance1 -= botRaise(botBalance1);

            raiseWhaat = botRaise(botBalance1); //VALUE OF HOW MUCH THE BOT HAS RAISED
            botBalance1 -= raiseWhaat;
            document.getElementById('opp1BalanceValue').innerHTML = (`L£${numberWithSpaces(botBalance1)}`)

            pot += raiseWhaat;
            potDiv.innerHTML = (`L£${numberWithSpaces(pot)}`);

            opp1ResultDiv.innerHTML = (`raised L£${numberWithSpaces(raiseWhaat)}`)

        }
    }
    

    if(whichOpponent===2 && opponentFold2 === false){
        if(randNum === 0){//*FOLDING---------
        
            // console.log(`opponent ${2} folded`)
            opp2ResultDiv.innerHTML = 'folded'
            opponentFold2 = true
        }
        if((randNum > 1 && randNum <50)){//*CHECKING/CALLING----------
            const randomIndex = Math.floor(Math.random() * knocks.length);
            knocks[randomIndex].load();
            knocks[randomIndex].play();//plyay a random knock

            // console.log(`opponent ${2} checked`)

            opp2ResultDiv.innerHTML = 'checked'
   
        }
        if((randNum >= 50 && randNum <100)){//*RASING-----------
            moneySound.play()
            // console.log(`opponent ${2} raised`)
            botRaise(botBalance2) //raise with the second bot's balance

            raiseWhaat = botRaise(botBalance2); //VALUE OF HOW MUCH THE BOT HAS RAISED
            botBalance2 -= raiseWhaat;
            document.getElementById('opp2BalanceValue').innerHTML = (`L£${numberWithSpaces(botBalance2)}`)
            pot += raiseWhaat;
            potDiv.innerHTML = (`L£${numberWithSpaces(pot)}`);

            opp2ResultDiv.innerHTML = (`raised L£${numberWithSpaces(raiseWhaat)}`)


        }
    }
    if(whichOpponent===3  && opponentFold3 === false){
        if(randNum === 0){//*FOLDING---------
            // console.log(`opponent ${3} folded`)
            opp3ResultDiv.innerHTML = 'folded'
            opponentFold3 = true
        }
        if((randNum > 1 && randNum <50)){//*CHECKING/CALLING-----------
            const randomIndex = Math.floor(Math.random() * knocks.length);
            knocks[randomIndex].load();
            knocks[randomIndex].play();//plyay a random knock
            // console.log(`opponent ${3} checked`)

            opp3ResultDiv.innerHTML = 'checked'

        }
        if((randNum >= 50 && randNum <100)){//*RASING------------
            moneySound.play()
            // console.log(`opponent ${3} raised`)
            botRaise(botBalance3) //raise with the third bot's balance
            botBalance3 -= botRaise(botBalance3);

            raiseWhaat = botRaise(botBalance3); //VALUE OF HOW MUCH THE BOT HAS RAISED
            botBalance3 -= raiseWhaat;
            document.getElementById('opp3BalanceValue').innerHTML = (`L£${numberWithSpaces(botBalance3)}`)

            pot += raiseWhaat;
            potDiv.innerHTML = (`L£${numberWithSpaces(pot)}`);

            opp3ResultDiv.innerHTML = (`raised L£${numberWithSpaces(raiseWhaat)}`)
        }
    }

}



let maxPercent = 20; //*Max percent bots can raise is 20% of their hand

function playerFold(){
    // console.log('folded')
    funnyMusic.play();

    setTimeout(() => {
        funnyMusic.pause(); 
        // funnyMusic.currentTime = 0; 
    }, 100); 

    alert('never give up!')
    //* play first few seconds of hopes and dreams from undertale
}

function check(){
    flipCommunityCards()

}

function botRaise(whichBotBalance){//returns a random raise value
    let result = (whichBotBalance * maxPercent) / 100;
    let howMuchBotRaise = generateRandNums(result)
    // console.log(howMuchBotRaise)
    return howMuchBotRaise;
    // generateRandNums
}

function play(){
    flipCommunityCards()
  
}
function next(){
    flipCommunityCards()

}


//TODO: add bad bots, like the bots go all in every time
//TODO: add an equation to evaluate the 'value' of each hand

//TODO: Add logic for bot raising and checking
//TODO: Make the opponent cards be hidden until the last round. Or when they go all in

//Oct-1-2024---------DONE
//!PROBLEM, when I'm trying to push the seperate values and suites to the wholeHand array
//!i'm calling the generateCard function AGAIN, which causes a new value and array to be generated
//*SOLUTION: split the existing card into two parts, and push those parts to the respective arrays
//!PROBLEM, values appear twice in the console log, uhh why?
//*SOLUTION: you dummy! you were pushing the values to the array twice! You were already pushing them in the generateCards() function, and you pushed them again when drawing and flipping! How silly

//Oct-8-2024-------DONE
//!PROBLEM, the 'handvals' arent actually hand vals. They're just an extension of the community hand
//*SOLUTION, make handVals a real thing? Push the items to handVals and then merge them (for real this time)
//*SOLUTION: handle all the pushing array sorting stuff in the generateCard function


//Oct-15-2024-----ABANDONED
//*BOTS CALLING LETS GO!
//*If someone has raised, then checking makes the bot match the raise
//*let callValue = raise (how much raised?)
//*At the beginning of each turn, the 'ifRaised' variable is zero
///*AAAND if someone raises, its now true, and then instead of checking, the call function is called
//* AAAND after the call function is called the 'ifRaised' variable is now false

//Oct-15-2024-----DONE
//!PROBLEM, I don't want to keep coding the bots!
//*SOLUTION: Stop coding the bots!

//Oct-17-2024-----DONE
//!PROBLEM, Flushes don't work!
//*SOLUTION: Fix flushes! Maybe make a set to store the pair and the three as seperate values?

//Oct-23-2024-----DONE
//!PROBLEM, Aaron said my game is bad, because there is no high card. That is valid.
//*SOLUTION: Program high card!
//*Make an array that stores all winners? And if theres more than one winner, go to function that decides high card
//*Grab the highest card from each of the players, and see who's the highest

//Oct-23-2024------
//!PROBLEM, High cards only evaluate in pairs if the high card is higher than the pair.
//*Solution, make the high card logic evaluate the sum of the hand instead of the highest card in the hand
</script>

</body>
</html>
